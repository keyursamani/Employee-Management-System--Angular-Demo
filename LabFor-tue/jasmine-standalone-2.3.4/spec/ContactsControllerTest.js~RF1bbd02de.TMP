/// <reference path="../../Scripts/angular.js" />
/// <reference path="../../Scripts/angular-mocks.js" />
/// <reference path="../../App/app.js" />
/// <reference path="../../App/Models/Contact.js" />
/// <reference path="../../App/Controllers/ContactsController.js" />

/// <reference path="../../App/Components/components.js" />

/* global beforeEach, describe, it, expect, inject, module */

describe("Contacts Controller", function () {


    beforeEach(module("contactsApp"));

    describe("sort order", function () {
        var scope, controller;

        beforeEach(inject(function ($rootScope, $controller) {
            scope = $rootScope.$new();
            controller = $controller;
        }));

        it("default should be last name", function () {
            controller("contactsController", { $scope: scope });
            expect(scope.sortOrder).toBe("lastName");

        });

    });


    describe("delete Button", function () {
        var scope, controller, window;

        beforeEach(inject(function ($rootScope, $controller,$window) {
            scope = $rootScope.$new();
            controller = $controller;
            window = $window;
        }));

        it("delete removes a contact", function () {
            controller("contactsController", { $scope: scope, $window: window });
            var length = scope.contacts.length;
            var contactToDelete = scope.contacts[length - 2];
            window.confirm = function () {
                return true;
            };

            scope.deleteContact(contactToDelete);
            expect(scope.contacts.length).toBe(length - 1);
            expect(scope.contacts.indexOf(contactToDelete)).toBe(-1);
        });

        it("delete and cancel does nothing contact", function () {
            controller("contactsController", { $scope: scope, $window: window });
            window.confirm = function () {
                return false;
            };
            var length = scope.contacts.length;
            var contactToDelete = scope.contacts[length - 2];
            scope.deleteContact(contactToDelete);
            expect(scope.contacts.length).toBe(length);
            expect(scope.contacts.indexOf(contactToDelete)).toBe(length - 2);
        });


    });


});
